package topcoder;


import java.util.*;

public class WakingUp {
	
	boolean check(int[] period, int[] start, int[] volume, int D, int s) {
		if (s <= 0) return true;
		
		int x = s;
		for (int i = 1; i <= 100000; ++i) {
			x += D;
			for (int j = 0; j < start.length; ++j)
				if (i >= start[j] && (i - start[j]) % period[j] == 0)
					x -= volume[j];
			if (x <= 0) return true;
		}
		
		return false;
	}
	
	public int maxSleepiness(int[] period, int[] start, int[] volume, int D) {
		
		int x = 0;
		for (int i = 1; i <= 20; ++i) {
			x += D;
			for (int j = 0; j < start.length; ++j)
				if (i >= start[j] && (i - start[j]) % period[j] == 0)
					x -= volume[j];
		}
		if (x < 0) return -1;
		
		int lo = 0;
		int hi = Integer.MAX_VALUE;
		
		while (lo < hi) {
			int mid = (lo + hi) / 2;
			if (check(period, start, volume, D, mid)) {
				lo = mid + 1;
			} else {
				hi = mid;
			}
		}
		
		return lo - 1 >= 0 ? lo - 1 : 0;
	}

// BEGIN CUT HERE
	public static void main(String[] args) {
		RETester.test(WakingUp.class, "test.*");
	}

	public void test0() {
		RETester.eq(maxSleepiness(new int[] {2, 3}, new int[] {1, 2}, new int[] {3, 4}, 3), 2);
	}

	public void test1() {
		RETester.eq(maxSleepiness(new int[] {1}, new int[] {1}, new int[] {17}, 17), 0);
	}

	public void test2() {
		RETester.eq(maxSleepiness(new int[] {1}, new int[] {1}, new int[] {23}, 17), -1);
	}

	public void test3() {
		RETester.eq(maxSleepiness(new int[] {9, 2, 5, 5, 7}, new int[] {6, 1, 4, 1, 6}, new int[] {71, 66, 7, 34, 6}, 50), 78);
	}

	public void test4() {
		RETester.eq(maxSleepiness(new int[] {5, 6, 5, 3, 8, 3, 4}, new int[] {1, 1, 3, 2, 6, 3, 3}, new int[] {42, 85, 10, 86, 21, 78, 38}, 88), -1);
	}

// END CUT HERE
}
